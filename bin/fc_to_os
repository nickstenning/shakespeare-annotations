#!/usr/bin/env python

import json
import os
import sys

HERE = os.path.dirname(__file__)
PLAY_MAP = {}

def load_play_map():
    m = open(os.path.join(HERE, '../mapping.txt'))

    for line in m:
        fc_play, os_play = line.split('\t', 1)
        PLAY_MAP[fc_play.strip()] = os_play.strip()

def convert_annotation(ann):
    fc_play = ann['uri'][:-5] # strip off '.html'
    os_play = PLAY_MAP[fc_play]

    new_ranges = []

    for r in ann['ranges']:
        r['start'], r['startOffset'] = xptr_fc_to_xptr_os(fc_play, r['start'], r['startOffset'])
        r['end'],   r['endOffset']   = xptr_fc_to_xptr_os(fc_play, r['end'], r['endOffset'])

    ann['uri'] = 'http://openshakespeare.org/work/' + os_play

    return ann


def xptr_fc_to_offset_fc(fc_play, xpath, offset):
    """

    Convert a FinalsClub XPointer into a FinalsClub global offset using the
    files generated by `bin/xpath_offsets`.

    """
    offset_fn = os.path.join(HERE, '../out/fc', fc_play + '.offset.txt')

    with open(offset_fn) as fp:
        # walk through the lines in the file, and find the first XPath that starts with
        # the given XPath. FinalsClub XPaths are of the form "/span[42]" even if the DOM has
        # additional structure (e.g. "/span[42]/p[1]/blockquote[1]"...

        for line in fp:
            l_offset, l_xpath = line.strip().split(' ', 1)
            l_offset = int(l_offset)

            if l_xpath.startswith(xpath):
                return l_offset + offset

        # fell through: huh?
        print >>sys.stderr, "WTF: ", fc_play, xpath, offset

def offset_fc_to_offset_os(os_play, offset_fc):
    """

    Convert a FinalsClub global offset into an OpenShakespeare global offset
    using the files generated by `bin/offset_mapping`.

    """
    mapping_fn = os.path.join(HERE, '../out', os_play + '.mapping.txt')

    last_offset_fc = 0
    last_offset_os = 0

    with open(mapping_fn) as fp:
        for line in fp:
            l_offset_fc, l_offset_os = map(int, line.strip().split(' ', 1))

            if l_offset_fc > offset_fc:
                return last_offset_os + (offset_fc - last_offset_fc)

            last_offset_fc = l_offset_fc
            last_offset_os = l_offset_os

        # fell through: return last offset
        return last_offset_os + (offset_fc - last_offset_fc)


def offset_os_to_xptr_os(os_play, offset_os):
    """

    Convert an OpenShakespeare global offset into an OpenShakespeare XPointer
    files generated by `bin/xpath_offsets`.

    """
    offset_fn = os.path.join(HERE, '../out/os', os_play + '.offset.txt')

    last_offset = 0
    last_xpath = None

    with open(offset_fn) as fp:
        for line in fp:
            l_offset, l_xpath = line.strip().split(' ', 1)
            l_offset = int(l_offset)

            if l_offset > offset_os:
                return (last_xpath, offset_os - last_offset)

            last_xpath, last_offset = l_xpath, l_offset

        # fell through: return last xpath/offset
        return (last_xpath, offset_os - last_offset)

def xptr_fc_to_xptr_os(fc_play, xpath, offset):
    os_play = PLAY_MAP[fc_play]
    offset_fc = xptr_fc_to_offset_fc(fc_play, xpath, offset)
    offset_os = offset_fc_to_offset_os(os_play, offset_fc)
    xptr_os = offset_os_to_xptr_os(os_play, offset_os)
    return xptr_os


if __name__ == '__main__':
    load_play_map()

    for line in sys.stdin:
        print json.dumps(convert_annotation(json.loads(line)))
